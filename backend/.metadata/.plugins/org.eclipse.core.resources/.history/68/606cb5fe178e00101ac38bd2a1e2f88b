package com.ekrishihub.backend.service;

import com.ekrishihub.backend.entity.AppUser;
import com.ekrishihub.backend.repository.UserRepository;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Collections;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        final String principal = (email == null) ? "" : email.trim().toLowerCase();

        AppUser user = userRepository.findByEmailIgnoreCase(principal)
                .orElseThrow(() -> new UsernameNotFoundException("Bad credentials"));

        // Optional: hard-block until email verified
        // if (!user.isEmailVerified()) {
        //     throw new DisabledException("Email not verified");
        // }

        // Defensive: ensure role is upper-case and non-null
        String role = (user.getRole() == null) ? "CUSTOMER" : user.getRole().trim().toUpperCase();

        return new org.springframework.security.core.userdetails.User(
                user.getEmail(),          // username
                user.getPassword(),       // hashed password
                user.isEnabled(),         // enabled -> must be true after OTP verify
                true,                     // accountNonExpired
                true,                     // credentialsNonExpired
                true,                     // accountNonLocked
                Collections.singletonList(
                        new SimpleGrantedAuthority("ROLE_" + role) // e.g. ROLE_FARMER
                )
        );
    }
}
